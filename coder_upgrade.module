<?php
/**
 * @file
 * Provides primary Backdrop hook implementations.
 *
 * Developer module that assists a contributed module with version upgrade from
 * the Drupal 7.x to Backdrop 1.x core API. The module creates new code files by
 * modifying existing code files in accordance with the core API changes. The 
 * initial Backdrop version would be a straight port of features from the Drupal
 * version.
 *
 * For a list of core API changes that are handled by this module, see:
 * - https://api.backdropcms.org/change-records
 *
 * Copyright 2008-11 by Jim Berry ("solotandem", http://drupal.org/user/240748)
 */

if (function_exists('t')) {
  // This code is being executed inside a process running Backdrop.
  module_load_include('inc', 'coder_upgrade', 'coder_upgrade');
}

/**
 * Implements hook_permission().
 */
function coder_upgrade_permission() {
  return array(
    'administer code conversions' => array(
      'title' => t('Administer code conversions'),
      'description' => t('Manage code conversion tasks for Coder Upgrade.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function coder_upgrade_menu() {
  module_load_include('inc', 'coder_upgrade', 'includes/menu');
  return _coder_upgrade_menu();
}

/**
 * Implements hook_menu_alter().
 */
function coder_upgrade_menu_alter(&$items) {
  if (!module_exists('coder_review')) {
    // Remove the Coder menu item.
    unset($items['admin/config/development/coder']);
    // Promote the menu items defined by this module.
    $items['admin/config/development/coder-upgrade']['title'] = 'Coder Upgrade';
    $items['admin/config/development/coder-upgrade']['type'] = MENU_NORMAL_ITEM;
  }
}

/**
 * Implements hook_config_info().
 */
function coder_upgrade_config_info() {
  $prefixes['coder_upgrade.settings'] = array(
    'label' => t('Coder Upgrade settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_autoload_info().
 */
function coder_upgrade_autoload_info() {
  return array(
    'PGPEditor' => 'grammar_parser/editor.inc',
    'PGPNode' => 'grammar_parser/list.inc',
    'PGPList' => 'grammar_parser/list.inc',
    'PGPBody' => 'grammar_parser/list.inc',
    'PGPExpression' => 'grammar_parser/list.inc',
    'PGPOperand' => 'grammar_parser/list.inc',
    'PGPString' => 'grammar_parser/list.inc',
    'PGPBase' => 'grammar_parser/object.inc',
    'PGPArray' => 'grammar_parser/object.inc',
    'PGPFunctionCall' => 'grammar_parser/object.inc',
    'PGPAssignment' => 'grammar_parser/object.inc',
    'PGPClass' => 'grammar_parser/object.inc',
    'PGPConditional' => 'grammar_parser/object.inc',
    'PGPFor' => 'grammar_parser/object.inc',
    'PGPForeach' => 'grammar_parser/object.inc',
    'PGPCase' => 'grammar_parser/object.inc',
    'PGPDeclare' => 'grammar_parser/object.inc',
    'PGPTryCatch' => 'grammar_parser/object.inc',
    'PGPListStatement' => 'grammar_parser/object.inc',
    'PGPNamespace' => 'grammar_parser/object.inc',
    'PGPUse' => 'grammar_parser/object.inc',
    'PGPParser' => 'grammar_parser/parser.inc',
    'PGPReader' => 'grammar_parser/reader.inc',
    'PGPWriter' => 'grammar_parser/writer.inc',
  );
}

